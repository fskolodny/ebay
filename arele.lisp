(defpackage #:arele
  (:use #:cl
	#:clog
	#:clog-gui
	#:json
	#:local-time
	#:models
	)
  (:shadow #:escape-string)
  (:use #:cl-who
	#:cl-ppcre
	)
  (:import-from #:hunchentoot #:*acceptor* #:easy-ssl-acceptor #:start #:started-p #:stop #:define-easy-handler #:redirect)
  (:import-from #:dexador #:post)
  (:export
   #:start-app
   )
  )

(in-package :arele)

(if (not (boundp '*acceptor*))
    (setf *acceptor* (make-instance 'easy-ssl-acceptor :port 8443 :ssl-privatekey-password "abcd" :ssl-privatekey-file #p"~/desktop.com.key" :ssl-certificate-file #p"~/desktop.com.crt")))
(defvar *auths* (make-hash-table :test 'equalp))
(defstruct auth-code
  code
  expiration
  )
(defstruct ebay-authorization
  authorize-url
  exchange-url
  refresh-url
  app-id
  secret
  redirect-uri
  refresh-code
  auth-code
  )
(defvar *current-auth* nil "Current authorization")
(defvar *authorizations* `((:sandbox ,(make-ebay-authorization :authorize-url "https://auth.sandbox.ebay.com/oauth2/authorize?client_id=FilaKolo-SellingF-SBX-a755ec4ee-0182f5cf&response_type=code&redirect_uri=Fila_Kolodny-FilaKolo-Sellin-dofox&scope=https://api.ebay.com/oauth/api_scope https://api.ebay.com/oauth/api_scope/buy.order.readonly https://api.ebay.com/oauth/api_scope/buy.guest.order https://api.ebay.com/oauth/api_scope/sell.marketing.readonly https://api.ebay.com/oauth/api_scope/sell.marketing https://api.ebay.com/oauth/api_scope/sell.inventory.readonly https://api.ebay.com/oauth/api_scope/sell.inventory https://api.ebay.com/oauth/api_scope/sell.account.readonly https://api.ebay.com/oauth/api_scope/sell.account https://api.ebay.com/oauth/api_scope/sell.fulfillment.readonly https://api.ebay.com/oauth/api_scope/sell.fulfillment https://api.ebay.com/oauth/api_scope/sell.analytics.readonly https://api.ebay.com/oauth/api_scope/sell.marketplace.insights.readonly https://api.ebay.com/oauth/api_scope/commerce.catalog.readonly https://api.ebay.com/oauth/api_scope/buy.shopping.cart https://api.ebay.com/oauth/api_scope/buy.offer.auction https://api.ebay.com/oauth/api_scope/commerce.identity.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.email.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.phone.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.address.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.name.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.status.readonly https://api.ebay.com/oauth/api_scope/sell.finances https://api.ebay.com/oauth/api_scope/sell.item.draft https://api.ebay.com/oauth/api_scope/sell.payment.dispute https://api.ebay.com/oauth/api_scope/sell.item https://api.ebay.com/oauth/api_scope/sell.reputation https://api.ebay.com/oauth/api_scope/sell.reputation.readonly https://api.ebay.com/oauth/api_scope/commerce.notification.subscription https://api.ebay.com/oauth/api_scope/commerce.notification.subscription.readonly"
							       :exchange-url "https://api.sandbox.ebay.com/identity/v1/oauth2/token"
							       :refresh-url "https://api.sandbox.ebay.com/identity/v1/oauth2/token"
							       :app-id "FilaKolo-SellingF-SBX-a755ec4ee-0182f5cf"
							       :secret "SBX-755ec4ee910c-fae8-40c5-af55-5436"
							       :redirect-uri "Fila_Kolodny-FilaKolo-Sellin-dofox"
							       ))
			   (:production ,(make-ebay-authorization :authorize-url "https://auth.ebay.com/oauth2/authorize?client_id=FilaKolo-SellingF-PRD-f75719fb7-f015cf08&response_type=code&redirect_uri=Fila_Kolodny-FilaKolo-Sellin-wtzukf&scope=https://api.ebay.com/oauth/api_scope https://api.ebay.com/oauth/api_scope/sell.marketing.readonly https://api.ebay.com/oauth/api_scope/sell.marketing https://api.ebay.com/oauth/api_scope/sell.inventory.readonly https://api.ebay.com/oauth/api_scope/sell.inventory https://api.ebay.com/oauth/api_scope/sell.account.readonly https://api.ebay.com/oauth/api_scope/sell.account https://api.ebay.com/oauth/api_scope/sell.fulfillment.readonly https://api.ebay.com/oauth/api_scope/sell.fulfillment https://api.ebay.com/oauth/api_scope/sell.analytics.readonly https://api.ebay.com/oauth/api_scope/sell.finances https://api.ebay.com/oauth/api_scope/sell.payment.dispute https://api.ebay.com/oauth/api_scope/commerce.identity.readonly https://api.ebay.com/oauth/api_scope/commerce.notification.subscription https://api.ebay.com/oauth/api_scope/commerce.notification.subscription.readonly"
								  :exchange-url "https://api.ebay.com/identity/v1/oauth2/token"
								  :refresh-url "https://api.ebay.com/identity/v1/oauth2/token"
								  :app-id "FilaKolo-SellingF-PRD-f75719fb7-f015cf08"
								  :secret "PRD-75719fb72196-9187-48f7-8d79-92cd"
								  :redirect-uri "Fila_Kolodny-FilaKolo-Sellin-wtzukf"
								  ))
			   )
  )
(if (not (started-p *acceptor*))
    (progn
      (setf sb-ext:*exit-hooks* (push (lambda () (if (started-p *acceptor*) (stop *acceptor* :soft t))) sb-ext:*exit-hooks*))
      (start *acceptor*)
      (define-easy-handler (send-login :uri "/") ()
	(with-html-output-to-string (s)
	  ((:html)
	   ((:body)
	    ((:form :action "/login" :method "POST" :style "{margin: auto; width: 20%}")
	     ((:table)
	      ((:tbody)
	       ((:tr)
		((:td) "Userid")
		((:td) ((:input :type "text" :name "userid" :autofocus t))))
	       ((:tr)
		((:td) ((:input :type "submit" :value "Submit")))
		((:td) ((:input :type "reset" :value "Reset")))
		)
	       )
	      )
	     )
	    )
	   )
	  )
	)
      (define-easy-handler (process-login :uri "/login") (userid)
	(redirect (format nil "~a&state=~a&" (ebay-authorization-authorize-url *current-auth*) userid))
	)
      (define-easy-handler (accept-authorization :uri "/accepted") (code state)
	(let ((auth (make-ebay-authorization :authorize-url (ebay-authorization-authorize-url *current-auth*)
					     :exchange-url (ebay-authorization-exchange-url *current-auth*)
					     :refresh-url (ebay-authorization-refresh-url *current-auth*)
					     :app-id (ebay-authorization-app-id *current-auth*)
					     :secret (ebay-authorization-secret *current-auth*)
					     :redirect-uri (ebay-authorization-redirect-uri *current-auth*)
					     ))
	      )
	  (multiple-value-bind (body status headers uri stream)
	      (post (ebay-authorization-exchange-url auth)
		    :basic-auth `(,(ebay-authorization-app-id auth) . ,(ebay-authorization-secret auth))
		    :content `(("grant_type" . "authorization_code")
			       ("redirect_uri" . ,(ebay-authorization-redirect-uri auth))
			       ("code" . ,code)
			       )
		    )
	    (declare (ignorable status headers uri stream))
	    (let* ((json-obj (json-decode body))
		   (access-token (json-getf json-obj "access_token"))
		   (access-lifetime (json-getf json-obj "expires_in"))
		   (refresh-token  (json-getf json-obj "refresh_token"))
		   (refresh-lifetime (json-getf json-obj "refresh_token_expires_in"))
		   (token-expiration (timestamp+ (now) access-lifetime :sec))
		   (refresh-expiration (timestamp+ (now) refresh-lifetime :sec))
		   (auth-code (make-auth-code :code access-token :expiration token-expiration))
		   (refresh-code (make-auth-code :code refresh-token :expiration refresh-expiration))
		   )
	      (setf (ebay-authorization-auth-code auth) auth-code
		    (ebay-authorization-refresh-code auth) refresh-code
		    )
	      )
	    )
	  (setf (gethash state *auths*) auth)
	  (redirect (format nil "http://desktop.com:8080/?userid=~a" state))
	  )
	)
      )
    )

(defclass app-data ()
  ((data :accessor data)
   (auth :type ebay-authorization :accessor auth)
   )
  )
(defun to-dollar (value)
  (multiple-value-bind (x result) (ppcre:scan-to-strings "(\\d+)(.(\\d{2}))?" value)
    (declare (ignore x))
    (/ (+ (* 100 (parse-integer (or (aref result 0) "0"))) (parse-integer (or (aref result 2) "0"))) 100)
    )
  )

(defun display-dollar (value)
  (format nil "~$" (/ value 100))
  )

(defun on-investor-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
         (win (create-gui-window obj :title "Investors"))
         (panel (create-div (window-content win)))
	 (slots '(:name :percentage))
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(table (:bind table)
	       (table-head (:bind th :style "text-align: center"))
	       (table-body (:bind tb))
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (investor)
	      (with-clog-create tb
		  (table-row (:bind tr))
		(create-table-column tr :content (investor-name investor))
		(create-table-column tr :content (investor-percentage investor) :style "text-align: right")
		)
	      )
	    (get-investors)
	    )
      )
    )
  )

(defun on-add-investor (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Investor" :width 400 :height 400))
	 (panel (create-div (window-content win)))
	 )
    (declare (ignore app))
    (with-clog-create panel
	(span ()
	      (form (:bind f1)
		    (table ()
			   (table-body ()
				       (table-row ()
						  (table-column () (label (:content "Name")))
						  (table-column () (form-element (:bind name :text)))
						  )
				       (table-row ()
						  (table-column () (label (:content "Percentage 0-100")))
						  (table-column () (select (:bind percentage)
								     (option (:value 0 :content 0))
								     (option (:value 30 :content 30 :selected t))
								     (option (:value 100 :content 100))
								     ))
						  )
				       (table-row ()
						  (table-column () (form-element (:submit :value "Submit")))
						  (table-column () (form-element (:reset :value "Reset")))
						  )
				       )
			   )
		    )
	      (div (:bind msg :content "Successfully added."))
	      )
      (setf (attribute name :required) t
	    (attribute percentage :required) t
	    (attribute msg :hidden) t
	    )
      (set-on-submit f1 (lambda (obj)
			  (declare (ignorable obj))
			  (add-investor :name (value name) :percentage (parse-integer (value percentage)))
			  (setf (attribute msg :hidden) nil)
			  (reset f1)
			  )
		     )
      )
    )
  )

(defun on-inventory-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Inventory"))
	 (inventory (create-div (window-content win)))
	 (slots '(:code :description))
	 )
    (declare (ignorable app inventory))
    (with-clog-create inventory
	(table (:bind table)
	       (table-head (:bind th :style "text-align: center")
			      )
	       (table-body (:bind tb)
			   )
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (item)
	      (with-clog-create tb
		  (table-row (:bind tr)
			     )
		(create-table-column tr :content (item-code item))
		(create-table-column tr :content (item-description item))
		)
	      )
	    (get-items)
	    )
      )
    )
  )

(defun on-add-item (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Item"))
	 (panel (create-div (window-content win)))
	 )
    (declare (ignore app))
    (with-clog-create panel
	(form (:bind f1)
	      (fieldset (:bind fs1)
			(table ()
			       (table-body ()
					   (table-row ()
						      (table-column () (label (:content "Code")))
						      (table-column () (form-element (:bind code :text)))
						      )
					   (table-row ()
						      (table-column () (label (:content "Description")))
						      (table-column () (form-element (:bind description :text)))
						      )
					   (table-row ()
						      (table-column () (form-element (:submit :value "Ok")))
						      (table-column () (form-element (:reset :value "Clear")))
						      )
					   )
			       )
			)
	      )
      (setf (attribute description :requiredp) t
	    (attribute code :requiredp) t
	    (autofocusp code) t
	    )
      (set-on-submit f1 (lambda (obj)
			  (declare (ignore obj))
			  (add-inventory-item :code (value code) :description (value description))
			  (reset f1)
			  )
		     )
      )
    )
  )

(defun on-purchases-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Purchases" :width 600))
	 (purchases (create-div (window-content win)))
	 (slots '(:investor :item :date :quantity :on-hand))
	 (dollar-slots '(:price))
	 )
    (declare (ignorable app purchases))
    (with-clog-create purchases
	(table (:bind table)
	       (table-head (:bind th :style "text-align: center"))
	       (table-body (:bind tb))
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    dollar-slots)
      (mapc (lambda (purchase)
	      (with-clog-create tb
		  (table-row (:bind tr))
		(create-table-column tr :content (investor-name (purchase-investor purchase)))
		(create-table-column tr :content (item-description (purchase-item purchase)))
		(create-table-column tr :content (format-rfc3339-timestring nil (purchase-date purchase) :omit-time-part t))
		(create-table-column tr :content (purchase-quantity purchase) :style "text-align: right")
		(create-table-column tr :content (purchase-on-hand purchase) :style "text-align: right")
		(create-table-column tr :content (display-dollar (/ (purchase-price purchase) 100)) :style "text-align: right")
		)
	      )
	    (get-purchases)
	    )
      )
    )
  )

(defun on-add-purchase (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Purchase" :height 400 :width 600))
	 (panel (create-div (window-content win)))
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(div ()
	     (form (:bind f1)
		   (table (:bind tbl)
			  (table-body ()
				      (table-row ()
						 (table-column () (label (:content "Select item")))
						 (table-column () (select (:bind item)))
						 )
				      (table-row ()
						 (table-column () (label (:content "Date")))
						 (table-column () (form-element (:bind date :date)))
						 )
				      (table-row ()
						 (table-column () (label (:content "Price")))
						 (table-column () (form-element (:bind price :text)))
						 )
				      (table-row ()
						 (table-column () (label (:content "Quantity")))
						 (table-column () (form-element (:bind quantity :number)))
						 )
				      (table-row ()
						 (table-column () (label (:content "Select investor")))
						 (table-column () (select (:bind investor)))
						 )
				      (table-row ()
						 (table-column () (form-element (:submit :value "Ok")))
						 (table-column () (form-element (:reset :value "Clear")))
						 )
				      )
			     )
		   )
	     )
      (mapcar (lambda (i)
		(add-select-option item (item-code i) (item-description i)))
	      (get-items)
	      )
      (mapcar (lambda (i)
		(add-select-option investor (investor-name i) (investor-name i)))
	      (get-investors)
	      )
      (setf (attribute price :pattern) "\\d+([.]\\d\\d)?"
	    (attribute date :required) t
	    (attribute item :required) t
	    (attribute price :required) t
	    (attribute quantity :required) t
	    (minimum quantity) 1
	    (attribute investor :required) t
	    )
      
      (set-on-submit f1
		     (lambda (obj)
		       (declare (ignore obj))
		       (add-purchase :item (value item)
					    :date (value date) :quantity (value quantity) :price (to-dollar (value price))
					    :investor (value investor))
		       (reset f1)
		       )
		     )
      )
    )
  )

(defun on-listings-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Listings" :width 1200))
	 (listings (create-div (window-content win)))
	 (slots '(:item :date :quantity))
	 (dollar-slots '(:price))
	 )
    (declare (ignorable app))
    (with-clog-create listings
	(table (:bind table)
	       (table-head (:bind th :style "text-align: center"))
	       (table-body (:bind tb))
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    dollar-slots)
      (mapc (lambda (listing)
	      (with-clog-create tb
		  (table-row (:bind tr))
		(let ((purchase (listing-purchase listing))
		      )
		  (create-table-column tr :content (item-description (purchase-item purchase)))
		  )
		(create-table-column tr :content (format-rfc3339-timestring nil (listing-date listing) :omit-time-part t))
		(create-table-column tr :content (listing-quantity listing) :style "text-align: right")
		(create-table-column tr :content (display-dollar (/ (listing-price listing) 100)) :style "text-align: right")
		)
	      )
	    (get-listings)
	    )
      )
    )
  )
(defun on-add-listing (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Listing" :height 600))
	 (panel (create-div (window-content win)))
	 (max)
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(div ()
	     (form (:bind f1)
		   (table (:bind tbl)
			  (table-body ()
				      (table-row ()
						 (table-column () (label (:content "Select item")))
						 (table-column () (select (:bind item)))
						 )
				      (table-row ()
						 (table-column () (label (:content "Date")))
						 (table-column () (form-element (:bind date :date)))
						 )
				      (table-row ()
						 (table-column () (label (:content "Price")))
						 (table-column () (form-element (:bind price :text)))
						 )
				      (table-row ()
						 (table-column () (label (:content "Quantity")))
						 (table-column () (form-element (:bind quantity :number)))
						 )
				      (table-row ()
						 (table-column () (form-element (:submit :value "Ok")))
						 (table-column () (form-element (:reset :value "Clear")))
						 )
				      )
			     )
		   )
	     )
      (mapcar (lambda (i)
		(add-select-option item (item-code i) (item-description i)))
	      (get-items)
	      )
      (setf (attribute price :pattern) "\\d+(.\d\d)?"
	    (attribute item :required) t
	    (attribute price :required) t
	    (attribute date :required) t
	    (attribute quantity :required) t
	    (minimum quantity) 1
	    )
      (setf (maximum quantity) (get-on-hand-for-item (value item)))
      (set-on-change item (lambda (obj)
			    (declare (ignorable obj))
			    (setf (maximum quantity) (get-on-hand-for-item (value item)))
			    )
		     )
      (set-on-submit f1
		     (lambda (obj)
		       (declare (ignore obj))
		       (let ((q (parse-integer (value quantity)))
			     )
			 (add-listing :date (value date) :quantity q :price (to-dollar (value price)))
			 (reset f1)
			 )
		       )
		     )
      )
    )
  )

(defun on-sales-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Sales" :width 1200))
	 (panel (create-div (window-content win)))
	 (slots '(:date :quantity :customer :item))
	 (dollar-slots '(:price :fees :shipping))
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(table (:bind table)
	       (table-head (:bind th :style "text-align: center"))
	       (table-body (:bind tb))
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    dollar-slots)
      (mapc (lambda (sale)
	      (with-clog-create tb
		  (table-row (:bind tr))
		(create-table-column tr :content (format-rfc3339-timestring nil (sale-date sale) :omit-time-part t))
		(create-table-column tr :content (sale-quantity sale) :style "text-align: right")
		(create-table-column tr :content (sale-customer sale))
		(create-table-column tr :content (item-description (purchase-item (listing-purchase (sale-listing sale)))))
		(create-table-column tr :content (display-dollar (/ (sale-price sale) 100)) :style "text-align: right")
		(create-table-column tr :content (display-dollar (/ (sale-fees sale) 100)) :style "text-align: right")
		(create-table-column tr :content (display-dollar (/ (sale-shipping sale) 100)) :style "text-align: right")
		)
	      )
	    (get-sales)
	    )
      )
    )
  )

(defun on-add-sale (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Sale" :height 350 :width 500))
	 (panel (create-div (window-content win)))
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(form (:bind f1)
	      (table ()
		     (table-body ()
				 (table-row ()
					    (table-column () (label (:content "Select listing")))
					    (table-column () (select (:bind listing)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Date")))
					    (table-column () (form-element (:bind date :date)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Quantity")))
					    (table-column () (form-element (:bind quantity :number)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Price")))
					    (table-column () (form-element (:bind price :text)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Fees")))
					    (table-column () (form-element (:bind fees :text)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Shipping")))
					    (table-column () (form-element (:bind shipping :text)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Customer")))
					    (table-column () (form-element (:bind customer :text)))
					    )
				 (table-row ()
					    (table-column () (form-element (:submit :value "Ok")))
					    (table-column () (form-element (:reset :value "Reset")))
					    )
				 )
		     )
	      )
      (declare (ignorable date quantity price fees shipping customer))
      (mapc (lambda (l)
	      (add-select-option listing 1
				 (format nil "~a ~a ~a" (format-rfc3339-timestring t (listing-date l) :omit-time-part t) (item-description (listing-item l)) (listing-quantity l)))
	      )
	    (remove-if #'zerop (get-listings) :key 'listing-quantity)
	    )
      (setf (maximum quantity) (listing-quantity (get-listing (value listing))))
      (setf (attribute price :pattern) "\\d+([.].\\d\\d)?"
	    (attribute fees :pattern) "\\d+([.]\\d\\d)?"
	    (attribute shipping :pattern) "\\d+([.]\\d\\d)?"
	    (attribute listing :required) t
	    (attribute date :required) t
	    (attribute quantity :required) t
	    (attribute price :required) t
	    (attribute fees :required) t
	    (attribute customer :required) t
	    (minimum quantity) 1
	    )
      (set-on-change listing (lambda (obj)
			       (declare (ignorable obj))
			       (setf (maximum quantity) (listing-quantity (get-listing (value listing))))
			       )
		     )
      (set-on-submit f1 (lambda (obj)
			  (declare (ignore obj))
			  (let* ((l (get-listing (value listing)))
				 (ship (value shipping))
				 )
			    (when (<= 1 (parse-integer (value quantity)) (listing-quantity l))
			      (add-sale :listing l :date (value date) :quantity (parse-integer (value quantity)) :customer (value customer)
					       :price (to-dollar (value price)) :fees (to-dollar (value fees))	:shipping (to-dollar (or (and (plusp (length ship)) ship) "0")))
			      (reset f1)
			      )
			    )
			  )
		     )
      )
    )
  )

(defun on-update-shipping (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Update Shipping"))
	 (panel (create-div (window-content win)))
	 )
    (declare (ignore app))
    (with-clog-create panel
	(form (:bind f1)
	      (table ()
		     (table-body ()
				 (table-row ()
					    (table-column () (label (:content "Select sale")))
					    (table-column () (select (:bind sale)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Shipping")))
					    (table-column () (form-element (:bind shipping :text)))
					    )
				 (table-row ()
					    (table-column () (form-element (:submit :value "Ok")))
					    (table-column () (form-element (:reset :value "Reset")))
					    )
				 )
		     )
	      )
      (mapc (lambda (s)
	      (add-select-option sale 1 (format nil "~a ~a ~a" (format-rfc3339-timestring nil (sale-date s) :omit-time-part t)
							    (item-description (purchase-item (listing-purchase (sale-listing s)))) (sale-quantity s)))
	      )
	    (get-sales)
	    )
      (setf (attribute shipping :pattern) "\\d+([.]\\d\\d)?"
	    (attribute sale :required) t
	    (attribute shipping :required) t
	    )
      (set-on-submit f1 (lambda (obj)
			  (declare (ignore obj))
			  (update-shipping :sale (get-sale (value sale)) :shipping (to-dollar (value shipping)))
			  (reset f1)
			  )
		     )
	)
    )
  )

(defun on-amounts-due (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Amounts Due" :width 400 :height 300))
	 (panel (create-div (window-content win)))
	 (encumbered 0)
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(table (:bind tbl)
	       (table-head (:bind th :style "text-align: center"))
	       (table-body (:bind tb))
	       )
      (setf (attribute tbl :border) 1)
      (mapc (lambda (name)
	      (create-table-column th :content (format nil "~:(~a~)" name))
	      )
	    '(:name :|amount due| :remitted)
	    )
      (mapc (lambda (investor)
	      (let ((tr (create-table-row tb))
		    (amount-due 0)
		    )
		(create-table-column tr :content (investor-name investor))
		(create-table-column tr :content (display-dollar (/ amount-due 100)) :style "text-align: right")
		(create-table-column tr :content (display-dollar (/ (get-total-remittances-for-investor investor) 100)) :style "text-align: right")
		)
	      )
	    (remove-if #'zerop (get-investors) :key 'investor-percentage)
	    )
      )
    (create-div panel :content (format nil "Amount encumbered is ~a." (display-dollar (/ encumbered 100))))
    )
  )

(defun on-add-remittance (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Remittance" :height 600))
	 (panel (create-div (window-content win)))
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(form (:bind f1)
	      (table ()
		     (table-body ()
				 (table-row ()
					    (table-column () (label (:content "Select investor")))
					    (table-column () (select (:bind investor)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Date")))
					    (table-column () (form-element (:bind date :date)))
					    )
				 (table-row ()
					    (table-column () (label (:content "Amount")))
					    (table-column () (form-element (:bind amount :text)))
					    )
				 (table-row ()
					    (table-column () (form-element (:submit :value "Ok")))
					    (table-column () (form-element (:reset :value "Reset")))
					    )
				 )
		     )
	      )
      (mapc (lambda (i)
	      (add-select-option investor (investor-name i) (investor-name i))
	      )
	    (get-investors)
	    )
      (setf (attribute investor :required) t
	    (attribute date :required) t
	    (attribute amount :required) t
	    (attribute amount :pattern) "\\d+(.\d\d)?"
	    )
      (set-on-submit f1 (lambda (obj)
			  (declare (ignore obj)) 
			  (add-remittance :investor (get-investor (value investor)) ;; find investor with this name
						 :date (value date) :amount (to-dollar (value amount)))
			  (reset f1)
			  )
		     )
      )
    )
  )
(defun on-help-about (obj)
  (let* ((about (create-gui-window obj
                                   :title   "About"
                                   :content "<div class='w3-black'>
                                         <center><img src='/img/clogwicon.png'></center>
                                         <center>arele</center>
                                         <center>arele</center></div>
                                         <div><p><center>A New App</center>
                                         <center>(c) 2023 - Fila Kolodny</center></p></div>"
                                   :hidden  t
                                   :width   200
                                   :height  200)))
    (window-center about)
    (setf (visiblep about) t)
    (set-on-window-can-size about (lambda (obj)
                                    (declare (ignore obj))()))))

(defun on-new-window (body)
  (format t "url ~a~%" (url (location body)))
  (let ((app (make-instance 'app-data))
	(uri (url (location body)))
	)
    (setf (connection-data-item body "app-data") app)
    (multiple-value-bind (scheme userinfo host port path query fragment)
	(quri:parse-uri uri)
      (declare (ignorable scheme userinfo host port path fragment))
      (dolist (match (remove-if-not (lambda (s)
				      (uiop:string-prefix-p "userid=" s)
				      )
				    (cl-ppcre:all-matches-as-strings "([^=&]+)(=([^&]+)?)" query)))
	(setf (auth app) (gethash (subseq match 7) *auths*))
	)
      )
    (setf (title (html-document body)) "EBay Store Software")
    (clog-gui-initialize body)
    (add-class body "w3-teal")
    (with-clog-create body
	(gui-menu-bar (:bind menu-bar)
		  (gui-menu-drop-down (:content "Investors")
				      (gui-menu-item (:content "Investor List" :on-click 'on-investor-list))
				      (gui-menu-item (:content "Add Investor" :on-click 'on-add-investor))
				      )
		  (gui-menu-drop-down (:content "Inventory")
				      (gui-menu-item (:content "Items" :on-click 'on-inventory-list))
				      (gui-menu-item (:content "Add Item" :on-click 'on-add-item))
				      )
		  (gui-menu-drop-down (:content "Purchases")
				      (gui-menu-item (:content "Purchases List" :on-click 'on-purchases-list))
				      (gui-menu-item (:content "Add Purchase" :on-click 'on-add-purchase))
				      )
		  (gui-menu-drop-down (:content "Listings")
				      (gui-menu-item (:content "Listings List" :on-click 'on-listings-list))
				      (gui-menu-item (:content "Add Listing" :on-click 'on-add-listing))
				      )
		  (gui-menu-drop-down (:content "Sales")
				      (gui-menu-item (:content "Sales List" :on-click 'on-sales-list))
				      (gui-menu-item (:content "Add Sale" :on-click 'on-add-sale))
				      (gui-menu-item (:content "Update Shipping" :on-click 'on-update-shipping))
				      )
		  (gui-menu-drop-down (:content "Remittances")
				      (gui-menu-item (:content "Add remittance" :on-click 'on-add-remittance))
				      )
		  (gui-menu-drop-down (:content "Reports")
				      (gui-menu-item (:content "Amounts due" :on-click 'on-amounts-due))
				      (gui-menu-item (:content "Investor List" :on-click 'on-investor-list))
				      (gui-menu-item (:content "Inventory items" :on-click 'on-inventory-list))
				      (gui-menu-item (:content "Purchases List" :on-click 'on-purchases-list))
				      (gui-menu-item (:content "Listings List" :on-click 'on-listings-list))
				      (gui-menu-item (:content "Sales List" :on-click 'on-sales-list))
				      (gui-menu-item (:content "EBay inventory" :on-click 'on-ebay-inventory))
				      (gui-menu-item (:content "Purchase List by Investor" :on-click 'on-investor-purchase-list))
				      )
		  (gui-menu-drop-down (:content "Help")
				      (gui-menu-item (:content "About" :on-click 'on-help-about))
				      )
		  )
      (create-gui-menu-full-screen menu-bar)
      )
    )
  )

(defun on-investor-purchase-list (body)
  (let* ((win (create-gui-window body :maximize t :title "Purchases by Investor"))
	 (panel (create-div (window-content win)))
	 )
    (with-clog-create panel
	(table (:bind tbl)
	       (table-head (:style "text-align: center")
			   (table-column (:content "Investor"))
			   (table-column (:content "Purchases"))
			   )
	       (table-body (:bind tb))
	       )
      (setf (attribute tbl :border) 1)
      (mapc (lambda (investor)
	      (with-clog-create tb
		  (table-row (:bind tr)
			     (table-column (:content (investor-name investor)))
			     )
		(when (investor-purchases investor)
		  (with-clog-create tr
		      (table-column (:content "Purchase" :style "text-align: center")
				    (table (:bind tbl)
					   (table-head (:style "text-align: center")
						       (table-column (:content "Date"))
						       (table-column (:content "Items"))
						       )
					   (table-body (:bind tb))
					   )
				    )
		    (setf (attribute tbl :border) 1)
		    (mapc (lambda (purchase)
			    (with-clog-create tb
				(table-row ()
					   (table-column (:content (purchase-date purchase)))
					   (table-column ()
							 (table (:bind tbl)
								(table-head (:style "text-align: center")
									    (table-column (:content "Item"))
									    (table-column (:content "Quantity"))
									    (table-column (:content "Price"))
									    )
								(table-body (:bind tb))
								)
							 )
					   )
			      (setf (attribute tbl :border) 1)
			      (mapc (lambda (pitem)
				      (with-clog-create tb
					  (table-row (:bind tr))
					(create-table-column tr :content (item-description (purchase-item pitem)))
					(create-table-column tr :content (purchase-quantity pitem) :style "text-align: right")
					(create-table-column tr :content (display-dollar (purchase-price pitem)) :style "text-align: right")
					)
				      )
				    (purchase-items purchase)
				    )
			      )
			    )
			  (investor-purchases investor)
			  )
		    )
		  )
		)
	      )
	    (get-investors)
	    )
      )
    )
  )

(defvar *dl*)
(defvar *ul*)
(defun create-compact-dl (obj)
  (create-child obj "<dl compact></dl>" :clog-type 'clog:clog-definition-list)
  )
(defun on-ebay-inventory (obj)
  (let* ((auth (auth (connection-data-item obj "app-data")))
	 (win (create-gui-window obj :maximize t :title "EBay inventory"))
	 (panel (create-div (window-content win)))
	 (json-obj (get-ebay-inventory-items auth))
	 (dl (create-compact-dl panel))
	)
    (let ((*dl* dl))
      (labels ((field-to-definition (field)
		 (let ((term (create-term *dl* :content (first field)))
		       (desc (create-description *dl*))
		       (val (second field))
		       )
		   (declare (ignore term))
		   (etypecase val
		     (json-object
		      (let ((*dl* (create-compact-dl desc))
			    )
			(mapc #'field-to-definition (json-object-members val))
			)
		      )
		     (list
		      (with-clog-create desc
			  (ordered-list (:bind ul))
			(let ((*ul* ul))
			  (mapc #'item-to-list-item val)
			  )
			)
		      )
		     (t
		      (setf (text desc) val)
		      )
		     )
		   )
		 )
	       (item-to-list-item (item)
		 (with-clog-create *ul*
		     (list-item (:bind li))
		   (etypecase item
		     (list
		      (with-clog-create li
			  (ordered-list (:bind ul))
			(let ((*ul* ul))
			  (mapc #'item-to-list-item item)
			  )
			)
		      )
		     (json-object
		      (let ((*dl* (create-compact-dl li)))
			(mapc #'field-to-definition (json-object-members item))
			)
		      )
		     (t
		      (setf (text li) item)
		      )
		     )
		   )
		 )
	       )
	(mapc #'field-to-definition (json-object-members json-obj))
	)
      )
    )
  )

(defun refresh-ebay-auth-code (auth)
  (multiple-value-bind (body status headers uri stream)
      (dexador:get (ebay-authorization-refresh-url auth)
		   :basic-auth `(,(ebay-authorization-app-id auth) . ,(ebay-authorization-secret auth))
		   :content `(("grant_type" . "refresh_token")
			      ("refresh_token" . ,(auth-code-code (ebay-authorization-refresh-code auth)))
			      )
		   )
    (declare (ignore headers uri stream))
    (let ((json-obj (json-decode body))
	  )
      (print status)
      (finish-output)
      (setf (ebay-authorization-auth-code auth) (make-auth-code :code (json-getf json-obj "access_token") :expiration (timestamp+ (now) (json-getf json-obj "expires_in") :sec)))
      )
    )
  )
(defun get-ebay-inventory-items (auth)
  (let ((auth-code (ebay-authorization-auth-code auth))
	)
    (if (timestamp> (now) (auth-code-expiration auth-code))
	(setf auth-code (refresh-ebay-auth-code auth))
	)
    (multiple-value-bind (body status headers uri stream)
	(dexador:get (format nil "https://~a/sell/inventory/v1/inventory_item" "api.sandbox.ebay.com")
		     :headers `((authorization . ,(format nil "Bearer ~a" (auth-code-code auth-code)))
				)
		     )
      (declare (ignorable body status headers uri stream))
      (json-decode body)
      )
    )
  )

(defun start-app (&key production)
  (setf *current-auth* (second (assoc (if production :production :sandbox) *authorizations*)))
  (initialize-models)
  (initialize 'on-new-window
	      :port 8080
	      :static-root (merge-pathnames "./www/"
					    (asdf:system-source-directory :arele)))
  (values)
  )

(defun convert-to-clobber ()
  (initialize-models)
  (let ((investors (mito:retrieve-by-sql (sxql:select (sxql:fields :name :percentage) (sxql:from :investors))))
	(inventory (mito:retrieve-by-sql (sxql:select (sxql:fields :code :description) (sxql:from :inventory))))
	(purchases (let ((purchases-hash (make-hash-table :test 'equalp))
			 (a (list))
			 )
		     (mapc (lambda (row)
			     (setf (gethash (cons (getf row :investor-id) (getf row :date)) purchases-hash) t))
			   (mito:retrieve-by-sql (sxql:select (sxql:fields :investor_id :date) (sxql:from :purchase_items))))
		     (maphash
		      (lambda (k v)
			(declare (ignorable v))
			(setf a (push k a)))
		      purchases-hash)
		     a))
	(purchase-items (mito:retrieve-by-sql (sxql:select (sxql:fields :investor_id :date :item_id :quantity :price :on_hand) (sxql:from :purchase_items))))
	)
    (mapc (lambda (investor)
	    (models:add-investor :name (getf investor :name) :percentage (getf investor :percentage))
	    )
	  investors)
    (mapc (lambda (item)
	    (models:add-inventory-item :code (getf item :code) :description (getf item :description))
	    )
	  inventory)
    (mapc (lambda (purchase)
	    (models:add-purchase :investor (get-investor (car purchase)) :date (cdr purchase))
	    )
	  purchases
	  )
    (mapc (lambda (pitem)
	    (models:add-purchase-item :quantity (getf pitem :quantity) :price (getf pitem :price)
				      :on-hand (getf pitem :on-hand) :item (models:get-inventory-item (getf pitem :item-id))
				      :purchase (find-if (lambda (p)
							   (and (equalp (purchase-date p) (getf pitem :date))
								(equalp (purchase-investor p) (get-investor (getf pitem :investor-id)))
								)
							   )
							 (get-purchases)
							 )
				      )
	    )
	  purchase-items
	  )
    )
  )
