(defpackage #:arele
  (:use #:cl
	#:clog
	#:clog-gui
	#:mito
	)
  (:export start-app))

(in-package :arele)

(mito:deftable investor ()
  ((id :col-type :biginteger :autoincrement (:primary-key t))
   (name :col-type (:varchar 128))
   (percentage :col-type :smallint))
  (:table-name "investors")
  )

(mito:deftable item ()
  ((id :col-type :biginteger :autoincrement (:primary-key t))
   (description :col-type (:varchar 128))
   )
  (:table-name "inventory")
  )

(mito:deftable purchase ()
  ((id :col-type :biginteger :autoincrement (:primary-key t))
   (investor-id :references investor)
   (item-id :references item)
   (date :col-type :datetime)
   (quantity :col-type :integer)
   (on-hand :col-type :integer)
   (price :col-type :integer)
   )
  (:table-name "purchases")
  )

(mito:deftable listing ()
  ((id :col-type :biginteger :autoincrement (:primary-key t))
   (purchase-id :references purchase)
   (date :col-type :datetime)
   (quantity :col-type :integer)
   (price :col-type :integer)
   )
  (:table-name "listings")
  )

(mito:deftable sale ()
  ((listing-id :references listing)
   (date :col-type :datetime)
   (quantity :col-type :integer)
   (price :col-type :integer)
   (fees :col-type :integer)
   (shipping :col-type :integer)
   )
  (table-name "sales")
  )

(mito:deftable remittance ()
  ((investor-id :references investor)
   (date :col-type :datetime)
   (amount :col-type :integer)
   )
  (table-name "remittances")
  )

(defun add-inventory-item (&key description &allow-other-keys)
  (mito:create-dao 'item :description description)
  )

(defun add-purchase (&key item date quantity price investor &allow-other-keys)
  (mito:create-dao 'purchase :item-id item :date date :quantity quantity :on-hand quantity :price price :investor-id investor)
  )

(defun add-listing (&key purchase date quantity price &allow-other-keys)
  (mito:create-dao 'listing :purchase-id purchase :date date :quantity quantity :price price)
  (mito:execute-sql "update purchases set on_hand = on_hand - ? where id = ?" (list quantity purchase))
  )

(defun on-investor-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
         (win (create-gui-window obj :title "Investors"))
         (investors (create-investors (window-content win)))
	 (slots '(id name percentage))
	 )
    (declare (ignorable app investors))
    (with-clog-create investors
	(table (:bind table)
	       (table-head (:bind th)
			      )
	       (table-body (:bind tb)
			   )
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (investor)
	      (with-clog-create tb
		  (table-row (:bind tr)
			     )
		(mapc (lambda (slot)
			(create-table-column tr :content (slot-value investor slot))
			)
		      slots)
		)
	      )
	    (mito:retrieve-dao 'investor)
	    )
      )
    )
  )

(defun on-inventory-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Inventory"))
	 (inventory (create-inventory (window-content win)))
	 (slots '(id description))
	 )
    (declare (ignorable app inventory))
    (with-clog-create inventory
	(table (:bind table)
	       (table-head (:bind th)
			      )
	       (table-body (:bind tb)
			   )
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (item)
	      (with-clog-create tb
		  (table-row (:bind tr)
			     )
		(mapc (lambda (slot)
			(create-table-column tr :content (slot-value item slot))
			)
		      slots)
		)
	      )
	    (mito:retrieve-dao 'item)
	    )
      )
    )
  )

(defun on-add-item (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Item"))
	 (panel (create-panel-1 (window-content win)))
	 )
    (declare (ignore app))
    (with-clog-create panel
	(form (:bind f1)
	      (fieldset (:bind fs1)
			(form-element (:bind description :text :label (create-label fs1 :content "Description")))
			(br ())
			(form-element (:submit :value "Ok"))
			(form-element (:reset :value "Clear"))
			)
	      )
      (set-on-submit f1 (lambda (obj)
			  (declare (ignore obj))
			  (setf (hiddenp f1) t)
			  (add-inventory-item :description (value description))
			  )
		     )
      )
    )
  )

(defun on-purchases-list (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Purchases"))
	 (purchases (create-purchases (window-content win)))
	 (slots '(:id :investor :item :date :price :quantity :on-hand))
	 )
    (declare (ignorable app purchases))
    (with-clog-create purchases
	(table (:bind table)
	       (table-head (:bind th)
			      )
	       (table-body (:bind tb)
			   )
	       )
      (setf (attribute table :border) 1)
      (mapc (lambda (slot)
	      (create-table-column th :content (format nil "~:(~a~)" slot))
	      )
	    slots)
      (mapc (lambda (purchase)
	      (with-clog-create tb
		  (table-row (:bind tr)
			     )
		(mapc (lambda (slot)
			(create-table-column tr :content (getf purchase slot))
			)
		      slots)
		)
	      )
	    (mito:retrieve-by-sql "select p.id, p.date, p.quantity, p.on_hand, p.price, iv.name as investor, it.description as item from purchases p inner join investors iv on p.investor_id == iv.id inner join inventory it on p.item_id = it.id")
	    )
      )
    )
  )

(defun on-add-purchase (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Purchase"))
	 (panel (create-panel-2 (window-content win)))
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(div ()
	     (form (:bind f1)
		   (fieldset (:bind fs1)
			     (select (:bind item :label (create-label fs1 :content "Select item")))
			     (form-element (:bind date :date :label (create-label fs1 :content "Date")))
			     (form-element (:bind price :text :label (create-label fs1 :content "Price")))
			     (form-element (:bind quantity :number :label (create-label fs1 :content "Quantity")))
			     (select (:bind investor :label (create-label fs1 :content "Select investor")))
			     (br ())
			     (form-element (:submit :value "Ok"))
			     (form-element (:reset :value "Clear"))
			     )
		   )
	     )
      (mapcar (lambda (i)
		(add-select-option item (item-id i) (item-description i)))
	      (mito:retrieve-dao 'item)
	      )
      (mapcar (lambda (i)
		(add-select-option investor (investor-id i) (investor-name i)))
	      (mito:retrieve-dao 'investor)
	      )
      (setf (attribute price :pattern) "\\d+([.]\\d\\d)?"
	    (attribute date :required) t
	    )
      
      (set-on-submit f1
		     (lambda (obj)
		       (declare (ignore obj))
		       (add-purchase :item (value item) :date (value date) :quantity (value quantity)
				     :price (value price) :investor (value investor))
		       )
		     )
      )
    )
  )

(defun on-add-listing (obj)
  (let* ((app (connection-data-item obj "app-data"))
	 (win (create-gui-window obj :title "Add Purchase"))
	 (panel (create-panel-2 (window-content win)))
	 )
    (declare (ignorable app))
    (with-clog-create panel
	(div ()
	     (form (:bind f1)
		   (fieldset (:bind fs1)
			     (select (:bind item :label (create-label fs1 :content "Select item")))
			     (form-element (:bind date :date :label (create-label fs1 :content "Date")))
			     (form-element (:bind price :text :label (create-label fs1 :content "Price")))
			     (form-element (:bind quantity :number :label (create-label fs1 :content "Quantity")))
			     (br ())
			     (form-element (:submit :value "Ok"))
			     (form-element (:reset :value "Clear"))
			     )
		   )
	     )
      (mapcar (lambda (i)
		(add-select-option item (item-id i) (item-description i)))
	      (mito:retrieve-dao 'item)
	      )
      (set-on-submit f1
		     (lambda (obj)
		        (declare (ignore obj))
			(let ((purchases (mito:retrieve-by-sql "select p.id, on_hand, date from purchases p inner join inventory i on p.item_id == i.id where on_hand > ? and i.id == ? order by date"
							       :binds (list (value quantity) (value item))))
			     )
			 (if (null purchases)
			     (alert win (format nil "Cannot list: quantity too large."))
			     )
			  (add-listing :purchase (getf (first purchases) :id) :date (value date)
				       :quantity (value quantity) :price (value price)
				       )
			  )
			)
		     )
      )
    )
  )

(defun on-help-about (obj)
  (let* ((about (create-gui-window obj
                                   :title   "About"
                                   :content "<div class='w3-black'>
                                         <center><img src='/img/clogwicon.png'></center>
                                         <center>arele</center>
                                         <center>arele</center></div>
                                         <div><p><center>A New App</center>
                                         <center>(c) 2023 - Fila Kolodny</center></p></div>"
                                   :hidden  t
                                   :width   200
                                   :height  200)))
    (window-center about)
    (setf (visiblep about) t)
    (set-on-window-can-size about (lambda (obj)
                                    (declare (ignore obj))()))))

(defclass app-data ()
  ((data
    :accessor data)))

(defun on-new-window (body)
  (let ((app (make-instance 'app-data)))
    (setf (connection-data-item body "app-data") app)
    (setf (title (html-document body)) "EBay Store Software")
    (clog-gui-initialize body)
    (add-class body "w3-teal")
    (with-clog-create body
	(gui-menu-bar (:bind menu-bar)
		  (gui-menu-drop-down (:content "Investors")
				      (gui-menu-item (:content "Investor List" :on-click 'on-investor-list))
				      )
		  (gui-menu-drop-down (:content "Inventory")
				      (gui-menu-item (:content "Items" :on-click 'on-inventory-list))
				      (gui-menu-item (:content "Add Item" :on-click 'on-add-item))
				      )
		  (gui-menu-drop-down (:content "Purchases")
				      (gui-menu-item (:content "Purchases List" :on-click 'on-purchases-list))
				      (gui-menu-item (:content "Add Purchase" :on-click 'on-add-purchase))
				      )
		  (gui-menu-drop-down (:content "Listings")
				      (gui-menu-item (:content "Listings List" :on-click 'on-listings-list))
				      (gui-menu-item (:content "Add Listing" :on-click 'on-add-listing))
				      )
		  (gui-menu-drop-down (:content "Help")
				      (gui-menu-item (:content "About" :on-click 'on-help-about))
				      )
		  )
      (create-gui-menu-full-screen menu-bar)
      )
    )
  )

(defun start-app ()
  (initialize 'on-new-window
   :static-root (merge-pathnames "./www/"
                  (asdf:system-source-directory :arele)))
  (open-browser))
